{"version":3,"sources":["logo.svg","mystyles.module.css","serviceWorker.js","components/todolist/todopopup.js","components/todolist/todo.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","TodoPopUp","props","useState","items","setItems","key","value","itemName","setItemName","className","onSubmit","e","preventDefault","target","reset","onClick","closePopup","icon","faWindowClose","placeholder","onChange","Date","now","type","map","item","newItems","console","log","itemEditHandler","filterItems","filter","deleteItemHandler","faTrash","ToDo","showPopup","setShowPopup","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,gBCC3CD,EAAOC,QAAU,CAAC,YAAc,gC,kPCWZC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oFCyDSC,EAvEG,SAACC,GAAW,IAAD,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,OAEOF,mBAAS,CAAEG,IAAK,GAAIC,MAAO,KAFlC,mBAElBC,EAFkB,KAERC,EAFQ,KA4CzB,OAEQ,yBAAKC,UAAU,SACV,0BAAMC,SA3CI,SAACC,GACpBA,EAAEC,iBACqB,KAAnBL,EAASD,QACTF,EAAS,GAAD,mBAAKD,GAAL,CAAYI,KACpBC,EAAY,CAAEH,IAAK,GAAIC,MAAO,MAElCK,EAAEE,OAAOC,UAsCD,yBAAKL,UAAU,eACX,kBAAC,IAAD,CAAiBM,QATT,WACpBd,EAAMe,cAQmDP,UAAU,YAAYQ,KAAMC,OAG7E,2BAAOC,YAAY,qBAAqBC,SAjC7B,SAACT,GACpBH,EAAY,CACRH,IAAKgB,KAAKC,MACVhB,MAAOK,EAAEE,OAAOP,SA8BsDG,UAAU,UAAUc,KAAK,SAC3F,4BAAQd,UAAU,cAAlB,YAGA,4BACKN,GAASA,EAAMqB,KAAI,SAACC,GAAD,OAChB,yBAAKhB,UAAU,WAAWJ,IAAKoB,EAAKpB,KAChC,2BAAOe,SAAU,SAACT,GAAD,OAlCjB,SAACN,EAAKC,GAC1B,IAAMoB,EAAWvB,EACjBK,EAAY,2BAAKD,GAAN,IAAgBD,WAC3BoB,EAASF,KAAI,SAACC,GACVE,QAAQC,IAAIH,GACRA,EAAKpB,MAAQA,IACbsB,QAAQC,IAAI,QACZH,EAAKnB,MAAQA,MAIrBF,EAASsB,GAuBmCG,CAAgBJ,EAAKpB,IAAKM,EAAEE,OAAOP,QAAQG,UAAU,YAAYc,KAAK,OAAOjB,MAAOmB,EAAKnB,QACjH,0BAAMG,UAAU,aACZ,kBAAC,IAAD,CAAiBM,QAAS,YAhD5B,SAACV,GACvB,IAAMyB,EAAc3B,EAAM4B,QAAO,SAAAN,GAAI,OAAIA,EAAKpB,MAAQA,KACtDD,EAAS0B,GACTH,QAAQC,IAAIzB,GA6C8C6B,CAAkBP,EAAKpB,MAAQI,UAAU,UAAUQ,KAAMgB,eCrC5GC,EAzBF,WAAO,IAAD,EACmBhC,oBAAS,GAD5B,mBACRiC,EADQ,KACGC,EADH,KAQf,OACI,oCACI,6BACI,4BAAQ3B,UAAU,YAAYM,QATpB,WAClBqB,GAAa,KAQL,SAEJ,yBAAM3B,UAAW0B,EAAY,mBAAqB,mBAC7CA,EAAY,yBAAKpB,QAAS,SAACJ,GAAKgB,QAAQC,IAAIjB,EAAEE,OAAOJ,WAAkC,kBAApBE,EAAEE,OAAOJ,WAA6B2B,GAAa,IAAU3B,UAAU,kBACvI,kBAAC,EAAD,CAAWO,WAVK,WAC5BoB,GAAa,OAUI,QCNzBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHkHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.5a3be648.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modulecolor\":\"mystyles_modulecolor__3sTVa\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState, useEffect } from 'react';\r\nimport './todo.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash,faWindowClose } from '@fortawesome/free-solid-svg-icons'\r\nconst TodoPopUp = (props) => {\r\n    const [items, setItems] = useState([]);\r\n    const [itemName, setItemName] = useState({ key: '', value: '' });\r\n\r\n    const additemHandler = (e) => {\r\n        e.preventDefault();\r\n        if (itemName.value !== \"\") {\r\n            setItems([...items, itemName]);\r\n            setItemName({ key: '', value: '' })\r\n        }\r\n        e.target.reset();\r\n\r\n    }\r\n    const deleteItemHandler = (key) => {\r\n        const filterItems = items.filter(item => item.key !== key)\r\n        setItems(filterItems);\r\n        console.log(items);\r\n\r\n    }\r\n    const textboxHandler = (e) => {\r\n        setItemName({\r\n            key: Date.now(),\r\n            value: e.target.value\r\n        })\r\n    }\r\n    const itemEditHandler = (key, value) => {\r\n        const newItems = items;\r\n        setItemName({ ...itemName, value })\r\n        newItems.map((item) => {\r\n            console.log(item)\r\n            if (item.key === key) {\r\n                console.log('come')\r\n                item.value = value;\r\n            }\r\n\r\n        })\r\n        setItems(newItems)\r\n\r\n\r\n    }\r\n    const closepopupHandler=()=>{\r\n        props.closePopup();\r\n    }\r\n\r\n    return (\r\n       \r\n            <div className=\"popup\">\r\n                 <form onSubmit={additemHandler}>\r\n                <div className=\"windowClose\">\r\n                    <FontAwesomeIcon onClick={closepopupHandler} className=\"iconclose\" icon={faWindowClose}/>\r\n                </div>\r\n               \r\n                <input placeholder=\"Enter item name...\" onChange={textboxHandler} className=\"textbox\" type=\"text\"></input>\r\n                <button className=\"todobutton\">Add item</button>\r\n              \r\n\r\n                <ol>\r\n                    {items && items.map((item) => (\r\n                        <div className=\"todolist\" key={item.key}>\r\n                            <input onChange={(e) => itemEditHandler(item.key, e.target.value)} className=\"iteminput\" type=\"text\" value={item.value} />\r\n                            <span className=\"trashicon\">\r\n                                <FontAwesomeIcon onClick={() => { deleteItemHandler(item.key) }} className=\"faTrash\" icon={faTrash} />\r\n                            </span>\r\n                        </div>\r\n                    ))}\r\n                </ol>\r\n                </form>\r\n            </div>\r\n        \r\n    )\r\n}\r\nexport default TodoPopUp;","import React, { useState } from 'react';\r\nimport './todo.css';\r\nimport TodoPopUp from './todopopup';\r\nconst ToDo = () => {\r\n    const [showPopup, setShowPopup] = useState(false);\r\n    const opentoHandler = () => {\r\n        setShowPopup(true);\r\n    }\r\n    const closePopupParentHandler = () => {\r\n        setShowPopup(false);\r\n    }\r\n    return (\r\n        <>\r\n            <div>\r\n                <button className=\"addbutton\" onClick={opentoHandler}>ToDo</button>\r\n            </div>\r\n            <div  className={showPopup ? \"popupparentblock\" : \"popupparentnone\"}>\r\n                {showPopup ? <div onClick={(e)=>{console.log(e.target.className);if(e.target.className==\"popupcontainer\"){setShowPopup(false)}}} className=\"popupcontainer\">\r\n                    <TodoPopUp closePopup={closePopupParentHandler} />\r\n                </div> : null}\r\n            </div>\r\n\r\n\r\n        </>\r\n\r\n\r\n    )\r\n}\r\nexport default ToDo;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Home from './Home'\nimport FlexboxComponent from './components/FlexboxComponent'\nimport HolyGrailLayout from './components/HolyGrailLayout'\nimport Calculator from './components/calculator/Calculator';\nimport Button from './components/calculator/Button';\nimport ToDo from './components/todolist/todo'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ToDo/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}